[{"body":"private   IGNORE_LIST   —   constant Modules to ignore when searching for available modules .","id":"docstrings/Publish.IGNORE_LIST.html"},{"body":"File Loaders Loading of references/bibliography .  We can either load a  .bib  file for use in LaTeX/PDF output, which turns on  citations = biblatex  for control of how citations are printed out to LaTeX . Our other option is to print out basic citations using a JSON or TOML source .  TODO: write conversion from JSON/TOML to BIB and back so that we can use either source for biblatex bibliographies . TODO: support YAML and XML as well?","id":"src/load.html#file-loaders"},{"body":"Project  Constructors","id":"src/projects.html#project-constructors"},{"body":"private   watch_files!   —   function Set files to watch for changes within a given  Project   p .","id":"docstrings/Publish.watch_files!.html"},{"body":"Package Initialisation Revise . jl is an optional dependency, we use Requires . jl to define a revise  method when it is available that triggers  Revise.revise .","id":"src/Publish.html#package-initialisation"},{"body":"Attributes These are used to assign arbitrary key/value pairs of metadata to any other markdown element, such as headings, paragraphs, inline formatting, etc . Block - level attributes apply to the subsequent block .  In this case it assigns the following attributes to the  #  heading . Inline - level attributes apply to previous element .  In this case it assigns the following attributes to the  `code`  inline code .","id":"docs/syntax.html#attributes"},{"body":"Supported image MIMES .","id":"src/cells.html#supported-image-mimes"},{"body":"Citations Citations can be included using the  @citeid  syntax in the same way as  Pandoc .","id":"docs/syntax.html#citations"},{"body":"Markdown Syntax All standard  commonmark  syntax is supported and provide by the CommonMark . jl  package .  What follows on this page is a summary of the additional syntax extensions provided through  Publish .  Refer to the commonmark spec  for details on the standard syntax .  The extensions that Publish  uses are documented in more detail in the  CommonMark . jl README .","id":"docs/syntax.html#markdown-syntax"},{"body":"private   init_markdown_parser   —   function Returns a new  CommonMark.Parser  object with all extensions enabled .","id":"docstrings/Publish.init_markdown_parser.html"},{"body":"private   loadtheme   —   function Searches the given  env  configuration for a Publish . jl theme and loads it into the provided  tree .  Since  tree  is immutable the updated version is returned along with a new  env  containing any merged data from the theme . loadtheme  looks for a  publish.theme  key in the  env  and tries to call the function defined by the value of the key . The themes included with this package are listed in the  Themes  module .","id":"docstrings/Publish.loadtheme.html"},{"body":"Exports","id":"src/Publish.html#exports"},{"body":"Common Settings title   —   String  of the document title . subtitle   —   String  of the document subtitle . authors   —   Vector{String}  of author names .  This is not the same as the  author  key in the root of your package ’ s  Project.toml  and may contain a different list of names, or it might be the same . lang   —   String  of the document language .  What language is the project written in, use  ISO Language Codes . keywords   —   Vector{String}  of document keywords .  Useful for categorising your project .","id":"docs/config.html#common-settings"},{"body":"private   init   —   function Function for defining the initialisation code called by  serve for a specific target output . Should be defined for each valid output target, i . e  html ,  pdf , etc .  Signature should follow the following template: where  target  is the  Function  defining the output format .","id":"docstrings/Publish.init.html"},{"body":"private   loadfile   —   function Loads a file .  Extended by  loadfile  methods that dispatch based on the extension  of the file .","id":"docstrings/Publish.loadfile.html"},{"body":"Executable  “ Cells ” Not all content you ’ ll want to write is static .  Sometimes you may want to generate content on the page using code .  Publish handles this in a similar way to packages such as Documenter (and others) . Julia code blocks are marked for execution using  attribute syntax . The key/value attribute  cell=name   “ namespaces ”  the cell under a unique Module  called  name .  Other cells on the  same page  can use the same name to share the namespace .  Cells are evaluated top to bottom on each page .  To use a unique namespace you can use the shorthand syntax  {:cell} : All output to  stdout  and  stderr  during the evaluation of a cell is captured and, if any is actually produced, is displayed immediately below the cell in a code block .  The final value, so long as it is not  nothing , of a cell is displayed below this in a suitable format for the given output ( html  or pdf ) . Below is an example of the evaluation of the cell above .","id":"docs/cells.html#executable-cells"},{"body":"private   revise   —   function When Revise . jl is loaded in the current session trigger  Revise.revise .","id":"docstrings/Publish.revise.html"},{"body":"private   relative_paths   —   function Rewrite any file paths within a  Project ’ s  .env  to be relative to the given  file  and pass then to the  func  argument for evaluation .","id":"docstrings/Publish.relative_paths.html"},{"body":"Name Module Visibility Category  Cell   Publish   private   struct   CellRule   Publish   private   struct   DEFAULT_MODULES   Publish   private   constant   Extension   Publish   private   parametric type   IGNORE_LIST   Publish   private   constant   Project   Publish   private   struct   default   Publish.Themes   private   function   Themes   Publish.Themes   private   module   binding   Publish   private   function   categorise   Publish   private   function   deploy   Publish   public   function   display_as   Publish   private   function   findproject   Publish   private   function   frontmatter   Publish   private   function   html   Publish   public   function   init   Publish   private   function   init_markdown_parser   Publish   private   function   json_search_data   Publish   private   function   limitedshow   Publish   private   function   loaddocs   Publish   private   function   loadfile   Publish   private   function   loadpages   Publish   private   function   loadtheme   Publish   private   function   modules   Publish   private   function   pdf   Publish   public   function   relative_paths   Publish   private   function   revise   Publish   private   function   rmerge   Publish   private   function   sandbox   Publish   private   function   save   Publish   private   function   serve   Publish   public   function   setup   Publish   public   function   update!   Publish   private   function   watch_files!   Publish   private   function   with_extension   Publish   private   function ","id":"docstrings.html#docstring-index"},{"body":"PDF - specific These settings must be added to a  [publish.latex]  section, similar to how the HTML  ones above . These  aren ’ t  configured in a  [publish.pdf]  section since they apply to the underlying LaTeX document rather than the PDF itself . If any settings do get added to specifically target the PDF generator then they will be added under a new  [publish.pdf]  section in future . documentclass   —   String  of the LaTeX  “ document class ”  to use for this document . preamble   —   String  content to add at the end of the LaTeX document preamble .  This can include package imports new command definitions and package settings that aren ’ t included in the default template .","id":"docs/config.html#pdf-specific"},{"body":"PDF We have two options that need to be handled here .  Either a bibliography file has been provided, in which case we must run biber  manually to correctly render bibliographies .  The other is the standard case, where no biblatex bibliography has been provided . TODO: handle docstrings . We don ’ t need to do any link resolving, since this is done by the TeX engine for us .  Instead we just mark  ‘ internal ’  links with a leading ‘ # ’  character and external ones without .","id":"src/save.html#pdf"},{"body":"private   categorise   —   function Returns the category of a given  Docs.Binding  object  binding .  These categories are used for displaying details about docstrings .","id":"docstrings/Publish.categorise.html"},{"body":"private   limitedshow   —   function Prints out a  “ limited ”  representation of  result  in the given  mime  to the provided  io  stream, or returns a  String  of the output when no  io  is given .","id":"docstrings/Publish.limitedshow.html"},{"body":"public   serve   —   function Start a server to present built output of project  src  for the given targets .  The actions performed by each  target  are defined by the targets themselves .  The default target used is  html .","id":"docstrings/Publish.serve.html"},{"body":"Fancy Typography The following  “ punctuation ”  replacements are made during parsing, double quotes ( \" ) are replaced with  “  and  ” , single quotes ( ' ) are replaced with   ‘  and  ’ , ellipses ( ... ) are replace with  … , double dashes ( -- ) is replaced with  – , and triple dashes ( --- ) is replaced with  — .","id":"docs/syntax.html#fancy-typography"},{"body":"private   update!   —   function Reload contents of the given  project .","id":"docstrings/Publish.update!.html"},{"body":"Admonitions These are specially marked blocks of markdown text that will be rendered differently to their surrounding text . Where  <word>  is a required single word,  <title>  is an optional plain text title to use with the admonition, and  <content>  is a four - space indented block of markdown text .  When no  <title>  is provided then the  <word>  is capitalised and used as the title . Special - cased  <words>  are  info ,  tip ,  warning ,  danger , and  compat which will be rendered in distinct colors .","id":"docs/syntax.html#admonitions"},{"body":"Tables Similar to  Figure  discussed above, we also have a  Table  object imported by default into cells that can be used to format tabular data in a more presentable way .  Under the hood it uses  PrettyTables.jl  for the formatting . Currently this is only supported for LaTeX/PDF output .  HTML table environments will be added later . Tables can be created as follows: Supported keywords, along with their default values, are: placement = \"h\" : where on the page to place the table . alighment = \"center\" : horizontal alighment of the table . caption = \"\" : a simple caption to go with the figure . desc = \"\" : short description to use in a  List of Tables .","id":"docs/cells.html#tables"},{"body":"Publish . jl A universal document authoring package for  Julia . Disclaimer Currently this package should be regarded as experimental  —  a proving ground for new features for the Julia documentation ecosystem rather than a mature and proven piece of software .  If you need a solution that will definitely work, look at  Documenter . jl  instead . This is a package for  Julia  that provides a general framework for writing prose  —  technical documentation is its focus, though it is general enough to be applied to any kind of written document . Some standout features: built - in live server to view your changes in real - time, uses a fully - compliant  commonmark  parser,  CommonMark . jl , produces HTML and PDF files natively, no LaTeX dependencies to manage yourself, publication - quality PDF generation uses  tectonic  for self - contained, reproducible builds, combine markdown files,  Jupyter  notebooks, and Julia files for your content, supports  themes  to customise both HTML and PDF output, and declarative configuration built on top of Julia ’ s  Pkg . jl  package manager . Publish  can scale from single pages all the way to large cross - referenced multi - project documents . To jump straight in and begin using  Publish  run the following in your Julia REPL: The above will install  Publish , import it, and then start up a local web - server for  Publish ’ s own documentation  —  the content you ’ re reading right now .  Open the link in your web browser and then continue on to the next section,  Getting Started .","id":"README.html#publishjl"},{"body":"private   Cell   —   struct A custom node type for CommonMark . jl that holds an executable  “ cell ”  of code .","id":"docstrings/Publish.Cell.html"},{"body":"private   binding   —   function Returns the  Docs.Binding  object given an expression or string .","id":"docstrings/Publish.binding.html"},{"body":"Includes","id":"src/Publish.html#includes"},{"body":"It ’ s worth noting that your  toc.md  doesn ’ t need to be a simple nested markdown list .  If your document layout should be split into two distinct lists, each with titles, then do that .  For example","id":"docs/structure.html#complex-layouts"},{"body":"HTML  -  print layout .  Self - contained with all local assets inlined . Replace the default  html  format with  html_doc  override . Read in the template . Move the project tree into the sandboxed directory . Capture the HTML output of each page in a dict since  save  does not give a stable ordering .  We ’ ll write them in the correct order afterwards . Make a mock AST to pass to the final  html  writer . Data - ify all requested resources . Setup the template renderer and write output . Write the main project file . Clear up other files, we should leave the destination directory clear aside from the single  .html  project file . TODO: handle docstrings . Ignore these, they already point to somewhere on this page . TODO: handle full - page links .","id":"src/save.html#html---print-layout-self-contained-with-all-local-assets-inlined"},{"body":"Cell Evaluator","id":"src/cells.html#cell-evaluator"},{"body":"Project Structure When a project is composed of multiple pages we need to provide  Publish  with the order in which we would like to include them in the final document .  This can be done in two distinct ways .","id":"docs/structure.html#project-structure"},{"body":"Suppressing Input, Output, and Results You may need a cell ’ s results or computations, but not want to display the result after that cell .  This can be achieved using display=false  to remove the cell itself from the final document, output=false  to skip showing the  stdout  and  stderr  streams below the cell, result=false  to suppress showing the resulting output value from the cell . Below is an example of the cell above . And then a cell that prints the value of  y , but does not display it ’ s result .","id":"docs/cells.html#suppressing-input-output-and-results"},{"body":"private   Themes   —   module Namespace for all themes that are provided with the package . Themes defined here should be 0 - arity functions that return the absolute path to the folder containing the theme definition . Provided themes are currently: default","id":"docstrings/Publish.Themes.html"},{"body":"public   html   —   function Convert the given  src  project to a collection of HTML files .","id":"docstrings/Publish.html.html"},{"body":"private   CellRule   —   struct A CommonMark rule used to define the  “ cell ”  parser .  A  CellRule  holds a .cache  of the  Module s that have been defined in a markdown document so that cells can depend on definitions and values from previous cells .","id":"docstrings/Publish.CellRule.html"},{"body":"private   display_as   —   function Given a  cell  this function evaluates it and prints the output to  writer using the first available  MIME  from  mimes .  Uses the  default  printer function to print any code blocks that are required in the output .","id":"docstrings/Publish.display_as.html"},{"body":"private   Project   —   struct A  struct  that holds details of a  “ project ” , which is defined as a configuration file (in TOML format), along with a collection of associated source and support files . “ Projects ”  can be created in two ways, by  Module , or configuration path . Create a new  Project  object from the given module  mod . Create a new  Project  object from the given configuration  path .  The path  must be a TOML file .","id":"docstrings/Publish.Project.html"},{"body":"private   modules   —   function Returns the set of modules visible from the given  root  module .","id":"docstrings/Publish.modules.html"},{"body":"Footnotes These can be added on a per - page basis .  Cross - document footnotes is not supported . Numbers and single word identifiers can be used as footnote names .","id":"docs/syntax.html#footnotes"},{"body":"private   frontmatter   —   function Returns a  Dict  containing the front matter content of a markdown  ast .  When no front matter is found then an empty  Dict  is returned .","id":"docstrings/Publish.frontmatter.html"},{"body":"Pages List The other option for specifying your document structure is to add some configuration to your  Project.toml .  Add a section to the end of the file like the example below You ’ ll likely have some amount of other information in this file since it ’ s used by  Pkg . jl  to manage your Julia package source code .  So long as you include all of the  Publish - specific configuration inside the  [publish] section it won ’ t disturb anything else . The  pages  key doesn ’ t allow you to define a nested structure or provide human - readable titles to each page .  If you outgrow what is provided by  pages then you must switch to using a  toc.md  instead .","id":"docs/structure.html#pages-list"},{"body":"private   loaddocs   —   function Loads  “ virtual ”  files for each docstring that is defined within the given project .  Merges these files into the given  tree  as well as appending them to pages .","id":"docstrings/Publish.loaddocs.html"},{"body":"Literate Julia Julia source code can also be read by  Publish .  The syntax used is a stripped down version of that available in  Literate . jl .  All the source code for this package is available for browsing within this document, via the  Source Code section in the navigation menu .  To summarise, lines starting with a single  # , with any amount of leading whitespace is treated as a line of markdown content, lines with a double  ##  are treated as a normal comment and the output will have one  #  stripped from it, other lines are treated as source code and not modified, none of the code blocks are executed, Publish  does not currently support Literate . jl ’ s filters such as  #md , #jl ,  #nb ,  #- , or  #+ , #src  unconditional filtering is supported .  Any line containing  #src will be stripped from the output . Publish  should play nicely with  Revise . jl  and simply importing Revise  prior to  Publish  and your own package will be enough to allow for Revise - style development when using  Publish .","id":"docs/sources.html#literate-julia"},{"body":"Raw Content These block and inline elements can be used to pass raw LaTeX or HTML through to the resulting output without processing it further .  Similar syntax to the  Attributes  above is used . Raw HTML blocks typically don ’ t need to be wrapped in  {=html}  since the commonmark parser supports raw HTML tags by default .","id":"docs/syntax.html#raw-content"},{"body":"Projects","id":"src/projects.html#projects"},{"body":"HTML - specific These must be added to a  [publish.html]  section rather than directly to your [publish]  section since they are  “ namespaced ”  to avoid conflicting with other keys . js   —   Vector{String}  of local and remote JavaScript resources that you want included in the  <head>  of your HTML pages . css   —   Vector{String}  similar to the one above for  js , but for CSS instead . header   —   String  of content to be inserted at the end of the HTML page ’ s  <head> . footer   —   String  of content to be inserted at the end of the HTML page ’ s  <body> . If you ’ re adding your own CSS and JavaScript then you may want to completely disable inclusion of the default files .  To do that you can set the following keys to  [] , an empty  Vector . default_js   —  similar to  js , but the defaults of the provided template . default_css   —  similar to  css , but the defaults of the provided template .","id":"docs/config.html#html-specific"},{"body":"HTML","id":"src/save.html#html"},{"body":"private   loadpages   —   function Finds all files defined by the project ’ s table of contents and loads them into the  tree .","id":"docstrings/Publish.loadpages.html"},{"body":"The Publish . jl package is licensed under the MIT  “ Expat ”  License: Copyright (c) 2020: Michael Hatherly . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  “ Software ” ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software . THE SOFTWARE IS PROVIDED  “ AS IS ” , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT .  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE .","id":"LICENSE.html"},{"body":"private   DEFAULT_MODULES   —   constant The set of modules available to all packages .","id":"docstrings/Publish.DEFAULT_MODULES.html"},{"body":"Table of Contents Firstly, you can add a  toc.md  file in the same folder as your  Project.toml and  README.md  files .  Here  “ toc ”  stands for table - of - contents .  Is provides a nested structure that describes your page order to  Publish .  For example In the above example we ’ ve included four  .md  files in our  toc.md  as well as more friendly titles .  All links are relative to the location of your  toc.md file, so keep that in mind when linking to files .  The layout and formatting your give your table - of - contents will be reproduced in the navigation menu of your HTML output, similar to what you ’ ll see if you open the navigation menu in the top left of this site .  For PDF output only the page inclusion  order  is taken into account since LaTeX provides it ’ s own table - of - contents formatting .","id":"docs/structure.html#table-of-contents"},{"body":"Jupyter Notebooks Notebook files, those ending with  .ipynb , can be imported in the same way as .md  files in your  toc.md  or  pages =   configuration .  They will behave in the exact same way . Saving your notebooks within a normal Jupyter session will be reflected in your Publish  server just like it is when saving normal markdown files . All source code cells are treated a  julia  code blocks in the resulting Publish  output .","id":"docs/sources.html#jupyter-notebooks"},{"body":"Auto - Identifiers This rule assigns page - unique  :id  attributes to all headings by stripping whitespace, lowercasing, and Unicode transformation .  It is modelled on the behaviour of  Pandoc ’ s auto identifiers .","id":"docs/syntax.html#auto-identifiers"},{"body":"Figures Some results may have common requirements for their display within a finished document, such as displaying an image within a figure environment in a PDF document .  Cells provide a default imported type called  Figure  which can wrap any type to provide some control over how it will be displayed . Currently this is only supported for LaTeX/PDF output .  HTML figure environments will be added later . Figures can be created as follows: Supported keywords, along with their default values, are: placement = 'h' : where on the page the figure should to be placed . alignment = \"center\" : horizontal alignment of the figure . maxwidth = \"\\\\linewidth\" : the maximum width that the image should take up . caption = \"\" : a simple caption to go with the figure . desc = \"\" : a short description to use in a  List of Figures .","id":"docs/cells.html#figures"},{"body":"Examples In the following examples our project will be the  Publish  package .  This can be switched out for any other project source, such as a Julia package or a simple  Project.toml  file . writes the output to the  \"build\"  subdirectory of the current directory . There will be a  build/<version>  folder containing HTML content . does the same as above, but build the  pdf  output instead . or build everything at once . The keyword arguments control other aspects of the build, as shown above .  For example, would build  Publish  documentation to an  ecosystem/Publish/<version> subdirectory .","id":"docstrings/Publish.deploy.html#examples"},{"body":"Tables GitHub - style pipe tables are supported with the same syntax .","id":"docs/syntax.html#tables"},{"body":"private   sandbox   —   function Evaluate the function  f  in the given folder given by  path .  When  path does not exist it is created first .","id":"docstrings/Publish.sandbox.html"},{"body":"Cross Referencing You may want to reference different parts of your document from other places in it .   Publish  supports this with a simplified version of Documenter . jl ’ s syntax .  You can do this by writing markdown link syntax .","id":"docs/references.html#cross-referencing"},{"body":"Direct and Indirect Smart References Smart references determine the location within a project that you would like to link to without having to explicitly write out the file paths . There are two kinds of smart reference links .   Direct  are those that are determined from the visible text of a link and  indirect  ones that use the “ title ”  text of a link to determine the destination instead . All smart references use a  single   #  as the link destination, i . e . In the above example the first link is a  direct  link since it does not provide a link title .  The second one is an  indirect  link since it does provide a title,  \"actual link\" , and so that text is used to determine the link destination instead of the text  indirect link .","id":"docs/references.html#direct-and-indirect-smart-references"},{"body":"private   findproject   —   function Returns the path to the configuration file for the module  mod . When no path can be found, for example  Base  and it ’ s modules, then  nothing is returned instead .","id":"docstrings/Publish.findproject.html"},{"body":"Contributing Contributions to the provided themes is encouraged .  The default themes, and their assets, live in a separate repository called  PublishThemes . They are hosted separately from the main Publish . jl package and are downloaded via Julia ’ s artifacts system when the package is installed by users .  To contribute please open pull requests against the PublishThemes repository .","id":"docs/themes.html#contributing"},{"body":"private   json_search_data   —   function Extract JSON search data from a project for use in lunr . js .","id":"docstrings/Publish.json_search_data.html"},{"body":"Referencing Docstrings If you ’ re writing the documentation for a Julia package then you probably have some docstrings .  Referencing them can be done in a similar way to the above referencing of headings and IDs .  The only difference is that the text is wrapped in backticks, since it represents  “ code ” . docstring  must be  visible  within your project .  What this means is that it  isdefined  within one of the  Module s that make up your package .","id":"docs/references.html#referencing-docstrings"},{"body":"LaTeX Maths Double backticks,  `` , are used to write inline LaTeX mathematics .  Fenced code blocks with the language set to  math  are used to write display equations . You may also need to use dollar - style syntax for mathematics, such as when writing Jupyter notebooks that you want to include in your project .  Inline dollar mathematics uses single  $  signs and display mathematics uses double $$ . Double  $$  signs for display mathematics must be on a single line and cannot span multiple lines . You should, by default, use backtick math syntax rather than dollar signs . This syntax is only provided to allow for interoperation with documents that do not use backticks .","id":"docs/syntax.html#latex-maths"},{"body":"Templates You can also completely replace the default HTML and LaTeX templates that Publish  uses with your own ones .  This can be done with the  publish.html.template.file and  publish.latex.template.file  keys .  You ’ ll need to create specific sections within your  Project.toml  to add them, like so If you ’ re going to write your own templates then having a read through then defaults will probably help you out a bit .  They can be found in the src/templates  directory of this package .","id":"docs/templates.html#templates"},{"body":"Example Jupyter Notebooks This page has been written as a Jupyter Notebook, which was introduced in the  Jupyter Notebooks  section of the manual .  The notebooks provided in this package are just illustrative of how you can integrate notebooks into the rest of your project and still allow for cross references between different parts of the finished document . Let ’ s load the required packages .  We ’ re using  Revise  as well since  Publish  integrates well with it and allows you to update your package  src/  contents, such as docstrings, and have the changes reflected in the document output immediately if you ’ re using the  serve  function . You can use  html  to do a one time build of the project: PDFs can be built using  pdf  in a similar way to  html  above: You probably want to use  serve  instead though, since that ’ ll spin up a web - server to host your project locally and allow you to view changes in real - time .","id":"examples/basics.html#example-jupyter-notebooks"},{"body":"Referencing Headings To refer to a heading somewhere else in the project it must be  uniquely  named —  specifically the  “ slug ”  generated by the heading text must be unique . Typically referencing a heading is as simple as placing the text of the heading as link text, or link title, and everything is calculated for you .  In cases where you have multiple headings within your document that contain the same text you ’ ll need to use the IDs instead, as explained in the  next section","id":"docs/references.html#referencing-headings"},{"body":"Cells in Literate Julia The  {:cell}  syntax for  executable cells  is not limited to just markdown files .  It will work the same across other source types as well . This page illustrates this using literate Julia . To use cells in a Julia file just add  {:cell}  at the end of a comment block before the code that you would like to be evaluated .  Like so: The cells behave the same across all source types and so you will need to provide named cells to be able to share values between cells . As we can see above the function  f  only has 1 method defined since it does not know about the previous cell .  Below we will define another cell but use the same name as before so that we can access it ’ s definitions . When the resulting value is all that you care about when writing a cell use can just discard the output stream and the cell itself using a little CSS by adding a  style=\"display: none\"  to the cell .  For example below we use the attributes  {cell=example output=false style=\"display: none\"}  to hide all but the result .  The cell content below is  methods(f) : Finally, we can also create types that have a  show  method defined for text/markdown .  This allows us to embed arbitrary generated markdown within a parent document . This text will appear in bold . Inline cells are also possible .  The source that produces them will not be displayed though, only the resulting value .   stdout  and  stderr  will not show either .  If the resulting value can be displayed as  text/markdown  it ’ s AST will be embedded, like above with the block cells, otherwise it will appear as a  text/plain  wrapped in inline code .  The previous  text/plain  was embedded in the resulting AST using an inline cell that evaluted the expression  Markdown.md\"`text/plain`\" .  Values, such as 3  or  π = 3.1415926535897... , will just display as inline code .","id":"examples/cells.html#cells-in-literate-julia"},{"body":"public   pdf   —   function Convert the given  src  project to a PDF file .","id":"docstrings/Publish.pdf.html"},{"body":"public   setup   —   function Initialise a  Publish  project in the given directory  dir , which is created if it does not already exist . When  dir  has a Julia project structure with a  Project.toml  file then Publish  is added to it ’ s dependencies list, otherwise, if it is not a Julia package then a  Project.toml  file is created as well as a  README.md  file .","id":"docstrings/Publish.setup.html"},{"body":"private   default   —   function The  “ default ”  theme used by this package .","id":"docstrings/Publish.Themes.default.html"},{"body":"Special Pages There ’ s a couple of pages that will appear in your output but that don ’ t exist within your project ’ s source files .  These are the generated docstring pages (under  docstrings/*.md ) and a docstring index page (found at  docstrings.md ) . You may want to add  /docstrings.md  to your  toc.md  if you ’ d like people to be able to search through your project ’ s available docstrings .  If you ’ r viewing this document in a browser then there should be a link to  Library Explorer  in the sidebar navigation menu .","id":"docs/structure.html#special-pages"},{"body":"Serving …","id":"src/serve.html#serving"},{"body":"Custom Themes Aside from altering the templates and providing your own custom CSS and JS files you may also create a fully customised theme that does not use any of the default assets shipped with Publish . To write your own theme create a folder with the name of your theme and add a Theme.toml  file to it . Add an underscore at the start of your folder name so that Publish won ’ t load it ’ s content automatically .  We ’ ll be adding the path manually to your [publish]  section of the project ’ s configuration file . Add the supporting assets, such as CSS, JS, and Mustache templates to the theme folder and then reference them in your  _my_theme_folder/Theme.toml  file like so and then in your project ’ s  Project.toml  file add a reference to this folder","id":"docs/themes.html#custom-themes"},{"body":"Keywords pkg::Bool=true  can be set to  false  to disable all  Pkg  calls during use of  setup .","id":"docstrings/Publish.setup.html#keywords"},{"body":"Getting Started","id":"docs/getting_started.html#getting-started"},{"body":"Helper Functions","id":"src/projects.html#helper-functions"},{"body":"You might have a  Publish  server running at the moment, pointed at Publish ’ s own documentation .  If not you can start one with Don ’ t forget to install  Publish  first using  Pkg.add .  You can leave this server running while we walk through creating your own project .  Choose one of the options below that best describes your needs: Julia package authors: The easiest way to get started with  Publish  if you ’ re a Julia package author is to import your package and then  serve  it with  Publish  like we ’ ve done above .   Publish  will look for the  Project.toml  for your package and use it to serve your project .  You should have a  README.md  as part of your package, which is what  Publish  will initially read since you ’ ve not specified anything else for it to find .","id":"docs/getting_started.html#serving-publish"},{"body":"versioned  and  named . These keywords will place the built files in either a versioned subdirectory, or a named subdirectory of  dir , or both (with name superceding version) . The values for  name  and  version  are taken from those provided in the project ’ s  Project.toml  file .  If these values are not specified then the “ deployment ”  will fail . force  will remove the calculated build path prior to building if it already exists . label  specifies a temporal folder name to copy the finished build to . This can be used to build a  “ tracking ”  version of documentation such as a “ dev ”  or  “ stable ”  that changes over time while still retaining the exact versioned builds .","id":"docstrings/Publish.deploy.html#keywords"},{"body":"Publish . jl Literate Source Code This package can use Julia source files as a content source, similar to normal markdown files .  It uses the same syntax to mark source lines as either markdown content or codeblocks .  You can read about the details of literate Julia files  here . These source file only make use of literate features as a test case for the package .  They should not be thought of as a showcase for literate programming itself .","id":"src/Publish.html#publishjl-literate-source-code"},{"body":"public   deploy   —   function Build the  source  using the given  targets  list in the  dir  directory . source  can be either a  Module  or a  String  representing a  Project.toml path . Keyword arguments can be used to control resulting directory structure .","id":"docstrings/Publish.deploy.html"},{"body":"Everyone else: If you ’ ve not got a Julia package that you ’ d like to document then don ’ t worry about it  —   Publish  is still perfect for your needs .  Run the following where  <directory>  is the path to the directory containing the prose you ’ d like to use . If you ’ ve not got anything written yet, that ’ s fine too .  Just point  setup at an empty directory .   Publish  will name your new project based on the directory ’ s name . You ’ re now ready to start serving a project and working on it .  If it ’ s a package that you ’ re working on use We ’ ve set the keyword  port=8001  since we ’ ve still got the other server running with  Publish ’ s documentation .  If you ’ ve only got one server going then you don ’ t need to worry about  port . If you ’ ve got a non - package project setup from  above  then just use the command it printed out to run .  Something like That ’ s all you need to get started .  Open that  localhost  link in a browser of your choice, edit your  README.md , and save it .  You ’ ll see the changes reflect in the browser soon afterwards .","id":"docs/getting_started.html#step-two"},{"body":"Deploying Projects We usually don ’ t build our projects in isolation and want others to be able to view our results .  For this you can use  deploy .  This function will build your project in the provided directory in a versioned subdirectory .","id":"examples/basics.html#deploying-projects"},{"body":"CommonMark Writers These definitions are needed by CommonMark to hook into it ’ s display system . The following two definitions aren ’ t really needed since Publish doesn ’ t support output to terminal or markdown, but are defined to ensure the display system is complete for the  Cell  node type . Custom Tables and Figures TODO: implement a table version of this as well . TODO: implement an equivalent HTML show for this type . Write out the objects left to right . HTML mimes must be embedded directly into output . Other types get written to file then read back in . We only wrap tabular environments, since longtable does all this for us . It is nessecary to pass along the options to pretty _ table for longtables since it handles captions and the like internally . Manually unwrap table until upstream deps are sorted . wrap _ table=false, wrap _ table=false,","id":"src/cells.html#commonmark-writers"},{"body":"Referencing IDs Each heading within a page is given a unique ID associated with it .  This is what is used in the  previous section  to determine destinations .  You can also assign your own special ID to individual markdown elements, most commonly headings, but also any other node type will do . Above we give a  #special-name  to the heading since it ’ s got a generic name that appears elsewhere in the project .  This allows us to refer to it from other places in the document using either a  direct  or  indirect  reference as discussed  above .  For example Using an ID as a  direct  reference is probably something you don ’ t want to do since IDs aren ’ t terribly human - friendly, but you can do it with","id":"docs/references.html#referencing-ids"},{"body":"private   rmerge   —   function Recursively merge the  Dict s provided in  ds .  Last argument wins when conflicts occur .","id":"docstrings/Publish.rmerge.html"},{"body":"Executable Cells This file defines a custom CommonMark node type that provides executable code cells . Load the module for the current cell and evaluate the contents . When the value is displayable as markdown then we reparse that representation and include the resulting AST in it ’ s place . Otherwise we just capture it ’ s value and output for display later as a normal cell .","id":"src/cells.html#executable-cells"},{"body":"File References When you reference a relative path to another file within a project the resulting link in the final document will point to the generated file rather than the original . The above link will reference the resulting content generated by  file.md .  So either a  file.html  or a particular page within the generated PDF .","id":"docs/references.html#file-references"},{"body":"private   save   —   function Wrapper function for  FileTrees.save  to configure whether to use parallel saving using  FileTrees  or to just use a basic serial implementation . Typically the simpler serial code will be faster unless the project is very large .","id":"docstrings/Publish.save.html"},{"body":"MIME  types Many types in Julia will already have the required  show  methods defined to display the type as either  \"text/html\"  or  \"text/latex\" .   DataFrames  is an example of this  —  if the result of a cell is a  DataFrame  then is will correctly render an HTML table or a LaTeX tabular environment in the output document since the package defines the needed  show  method . Some types you want to print may not come with a predefined  show  method .  In these cases the textual representation defined by the  \"text/plain\"   show method will be used to print the result . If a package provides a type that you ’ d like to display from a cell then it ’ s best practise to define the  show  method within that package so that it  “ owns ”  the method rather than defining it yourself .","id":"docs/cells.html#mime-types"},{"body":"Theme Loader","id":"src/themes.html#theme-loader"},{"body":"Front Matter At the start of any markdown file you can add a fenced block of  TOML  content . The TOML content is placed between triple  +++  signs at the  very  start of a file .  The TOML parser is the same that is used for parsing your  Project.toml files by Pkg . jl . Publish  allows you to override some global configuration from your [publish]  block in  Project.toml  within your pages ’  front matter blocks on a per - page basis .","id":"docs/syntax.html#front-matter"},{"body":"Configuration","id":"src/Publish.html#configuration"},{"body":"Themes","id":"src/themes.html#themes"},{"body":"Publishing If you ’ re writing documentation for a package you ’ ll probably want to host it online somewhere in HTML form for potential users to browse through before they decide whether to install it or not .  Even if what you ’ re writing isn ’ t a Julia package the following guide can be applied to it . Publish  provides the function  deploy  for the purpose of creating output that is suitable for hosting online .  This is similar in spirit to Documenter ’ s function that goes by same name . The  deploy  function is  “ layered ”  on top of  html  and  pdf , just as  serve  is also a  “ layer ”  on top of these simpler functions . Whereas  serve  is meant for local use,  deploy  is intended for use building documents for hosting online  —  though it can be used locally as well if you ’ d like to see what it produces . When you run  deploy  it will create a folder in the current directory named after the  version  field found in  Project.toml  containing the built HTML documentation .  For example, will build the HTML project defined by the  Publish  package in a folder named after the current  Publish  version in the current directory .  You can adjust these settings a fair amount .  See the  deploy  docs for details . For this part of the guide we ’ ll be using GitHub for building and hosting, but there is nothing in  deploy  that is  specific  to GitHub and it should work fine on any other kind of service . We ’ ll be using GitHub Actions and Pages to make building and deploying simple and straightforward .  It ’ s assumed that you ’ ve already got your source code hosted on a public GitHub repository . First, create a  gh-pages  branch for your repository .  Delete  all  the contents of this branch and then commit and push your changes to GitHub .  Switch back to your main development branch . Next we ’ ll need a GitHub Actions workflow file .  If you ran the  setup function  earlier  then you ’ ll already have a .github/workflows/Publish.yml .  If not then run that now to add the file . Open it up in an editor and find the line with and edit the  USER  to be what is needed to build your project correctly .  The keywords used by  deploy  here are  root  and  label : root  specifies a  “ root ”  path for all deployed documentation .  Since we ’ re using GitHub Pages to host your documentation it ’ ll be hosted at <username>.github.io/<pkg>.jl/ .  We need to tell  deploy  about this otherwise it ’ ll set the root to  <username>.gitgub.io/  which won ’ t point to the correct place . label  is used to assign a  “ tracking ”  folder that follows any changes you make, rather than just being an immutable version folder .  In this case we are deploying when changes are pushed to  master  and so the  “ tracking ” folder is  dev  which follows  Documenter ’ s naming scheme . You can change this to whatever you want .  For example you could create a separate actions file that runs when new releases are published to your repository and have that build your project in a  stable  folder to track your most recent stable documentation . Once you ’ ve committed and pushed these changes to GitHub it will start building your project on every commit to  master .  Read the  Actions  documentation for more details on what you can change . It ’ s now time to move on to the details of how to customise your project in the next section .","id":"docs/getting_started.html#publishing"},{"body":"I was promised PDFs Correct,  Publish  doesn ’ t just produce HTML websites .  PDF output is also available .   You don ’ t have to change anything with your  Project.toml  or README.md  to get it working either .  Just change your  serve  call slightly, This might take longer on your first run since  Publish  needs to download the support files needed by LaTeX to build your document .  You should get plenty of informative output in the REPL to tell you what ’ s happening . Once it ’ s finished compiling the PDF it should get opened in your default PDF viewer .  If your viewer supports auto - updates then when you make changes to README.md  is should be reflected automatically in the PDF . If you ’ re greedy and want both  pdf  and  html  then just run","id":"docs/getting_started.html#i-was-promised-pdfs"},{"body":"Imports","id":"src/Publish.html#imports"},{"body":"Utilities","id":"src/utilities.html#utilities"},{"body":"private   with_extension   —   function Return a path with the extension set to  ext .","id":"docstrings/Publish.with_extension.html"},{"body":"Configuration Publish  stores all it ’ s configuration data within the  Project.toml  file . So long as you do not access arbitrary global data and maintain suitable [compat]  bounds on packages where needed your  Publish  builds should be reproducible .  If you ’ re needing fully reproducible environments then you should also be saving the  Manifest.toml  file to track exact versions of dependencies .   For details on this topic please see the Pkg . jl docs on Manifest . toml files . The heart of  Publish ’ s configuration is the  [publish]  section of your Project.toml  file .  This is where everything related to  Publish  is stored . You ’ ve already seen some of it in  action .  Below we ’ ll go over what options are available when you need to customise your project . Some features you can make use of via  Publish ’ s configuration: set the  title ,  subtitle , and  author  of your document, load custom CSS and JavaScript into your HTML, add custom LaTeX preamble content to your PDF documents, used - defined templates for your documents, and numerous other options .","id":"docs/config.html#configuration"},{"body":"Source Types Up until now we ’ ve been using markdown files for our source content  —  those ending with  .md .   Publish  also allows using several other file types to be used in place of markdown files, so long as the text is formatted as markdown .","id":"docs/sources.html#source-types"},{"body":"Markdown  MIME  type If a type captured in the result of a cell has a  show  method defined for the MIME  type  text/markdown  then it will immediately be printed to this representation and then re - parsed by the markdown parser and embedded within the document ’ s AST rather as a  “ dumb ”  value .  This allows, for example, generated internal document links to be resolved correctly . If your type has suitable  show  definition, but you do not want to display as the AST then pass  markdown=false  as a cell attribute to use the normal display procedures instead .","id":"docs/cells.html#markdown-mime-type"},{"body":"private   Extension   —   parametric type A dispatch type used to make file loading extensible by extension name .","id":"docstrings/Publish.Extension.html"}]