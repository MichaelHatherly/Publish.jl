[{"body":"private   load_markdown   —   function Parse the contents found in  io  as markdown using the provided  parser  or the default created by  init_markdown_parser .","id":"docstrings/Publish.load_markdown.html"},{"body":"private   File   —   struct A  File  object represents a real, or  “ virtual ” , file within a  Project . The following are the available keyword ’ s supported by the  File  constructor . name : full path to the  File .   nothing  if it is  “ virtual ” . mime : the  MIME  type as defined  above . text : Raw  String  content of the  File . dict :  Dict{String,Any}  data from a parsed  .toml  file . node :  CommonMark.Node  abstract syntax tree from a parsed markdown file .","id":"docstrings/Publish.File.html"},{"body":"Interface for Julia ’ s Docsystem Not much is needed from the docsystem, we just build each  Binding ’ s docstrings as separate pages, as well as a table with links to each docstring page .  There ’ s no concept of  @docs  and  @autodocs  found in Documenter . jl .","id":"src/docstrings.html#interface-for-julias-docsystem"},{"body":"private   test   —   function Run all doctests defined within project  source .","id":"docstrings/Publish.test.html"},{"body":"Attributes These are used to assign arbitrary key/value pairs of metadata to any other markdown element, such as headings, paragraphs, inline formatting, etc . Block - level attributes apply to the subsequent block .  In this case it assigns the following attributes to the  #  heading . Inline - level attributes apply to previous element .  In this case it assigns the following attributes to the  `code`  inline code .","id":"docs/syntax.html#attributes"},{"body":"Citations Citations can be included using the  @citeid  syntax in the same way as  Pandoc .","id":"docs/syntax.html#citations"},{"body":"Markdown Syntax All standard  commonmark  syntax is supported and provide by the CommonMark . jl  package .  What follows on this page is a summary of the additional syntax extensions provided through  Publish .  Refer to the commonmark spec  for details on the standard syntax .  The extensions that Publish  uses are documented in more detail in the  CommonMark . jl README .","id":"docs/syntax.html#markdown-syntax"},{"body":"private   init_markdown_parser   —   function Create a new  CommonMark.Parser  object with the extensions we want to support in  Publish .","id":"docstrings/Publish.init_markdown_parser.html"},{"body":"Exports As well as the few functions and types that  Publish  exports for public use . This is the end of our  src/Publish.jl  source file .  The rest of the source code can be found by browsing further through this document . We ’ ll hide the  end  keyword on the last line of this file by using the Attributes  syntax provided by the  CommonMark . jl  package .  By writing as the last line of a comment block the subsequent code block will not be display in the resulting output .","id":"src/Publish.html#exports"},{"body":"private   visible_modules   —   function What modules are available from the given project environment  env .","id":"docstrings/Publish.visible_modules.html"},{"body":"Common Settings title   —   String  of the document title . subtitle   —   String  of the document subtitle . authors   —   Vector{String}  of author names .  This is not the same as the  author  key in the root of your package ’ s  Project.toml  and may contain a different list of names, or it might be the same . lang   —   String  of the document language .  What language is the project written in, use  ISO Language Codes . keywords   —   Vector{String}  of document keywords .  Useful for categorising your project .","id":"docs/config.html#common-settings"},{"body":"“ Doctests ”  Stub This is not implemented yet .  Output should be the same as for the  Test module .  Probably use it to do the actual testing .","id":"src/targets.html#doctests-stub"},{"body":"private   project_to_module   —   function Find the top - level module associated with a given project environment  env .","id":"docstrings/Publish.project_to_module.html"},{"body":"private   revise   —   function If  Revise  has been loaded into the current session then run  Revise.revise  to pick up any changes within out project ’ s docstrings .","id":"docstrings/Publish.revise.html"},{"body":"Name Module Visibility Category  rootmodule   Publish   private   function   Publish   Publish   public   module   Project   Publish   private   struct   watch   Publish   private   function   update!   Publish   private   function   project_to_module   Publish   private   function   File   Publish   private   struct   editable   Publish   private   function   register_resources!   Publish   private   function   printdoc   Publish   private   function   smartlink   Publish   private   function   visible_modules   Publish   private   function   setup   Publish   public   function   load_markdown   Publish   private   function   modules   Publish   private   function   html   Publish   public   function   init_markdown_parser   Publish   private   function   categorise   Publish   private   function   WatchedProject   Publish   private   struct   DEFAULT_MODULES   Publish   private   constant   revise   Publish   private   function   pdf   Publish   public   function   docstrings   Publish   private   function   deploy   Publish   public   function   serve   Publish   public   function   tryset!   Publish   private   function   frontmatter   Publish   private   function   move!   Publish   private   function   test   Publish   private   function ","id":"docstrings.html#docstring-index"},{"body":"private   printdoc   —   function This method prints out the parts of an individual  Docs.DocStr  object to the given  IO  object  io .  It is used to get the  “ formatted ”  content of the docstring without it being pre - parsed by the  Markdown  standard library .","id":"docstrings/Publish.printdoc.html"},{"body":"PDF - specific These settings must be added to a  [publish.latex]  section, similar to how the HTML  ones above . These  aren ’ t  configured in a  [publish.pdf]  section since they apply to the underlying LaTeX document rather than the PDF itself . If any settings do get added to specifically target the PDF generator then they will be added under a new  [publish.pdf]  section in future . documentclass   —   String  of the LaTeX  “ document class ”  to use for this document . preamble   —   String  content to add at the end of the LaTeX document preamble .  This can include package imports new command definitions and package settings that aren ’ t included in the default template .","id":"docs/config.html#pdf-specific"},{"body":"private   categorise   —   function For the given  Docs.Binding  object, determine and return its  “ category ” , namely either  “ constant ” ,  “ global ” ,  “ struct ” ,  “ type ” ,  “ parametric struct ” , “ parametric type ” ,  “ module ” ,  “ macro ” , or  “ function .","id":"docstrings/Publish.categorise.html"},{"body":"private   register_resources!   —   function A helper function for use in  Project  that finds all files referenced in the [publish.html]  and  [publish.latex]  sections of a  Project.toml  and adds them to the  .resources  list in a  Project .","id":"docstrings/Publish.register_resources!.html"},{"body":"public   serve   —   function Start watching the project defined by  source  for changes and rebuild it when any occur .   targets  lists the functions to run when any changes take place .  By default this is  html , which runs a background HTTP server that presents the generated HTML output at  localhost:8000 .","id":"docstrings/Publish.serve.html"},{"body":"Fancy Typography The following  “ punctuation ”  replacements are made during parsing, double quotes ( \" ) are replaced with  “  and  ” , single quotes ( ' ) are replaced with   ‘  and  ’ , ellipses ( ... ) are replace with  … , double dashes ( -- ) is replaced with  – , and triple dashes ( --- ) is replaced with  — .","id":"docs/syntax.html#fancy-typography"},{"body":"private   update!   —   function Removes the cached project and then rebuilds it to a new project and moves it ’ s content over to the old project .","id":"docstrings/Publish.update!.html"},{"body":"Admonitions These are specially marked blocks of markdown text that will be rendered differently to their surrounding text . Where  <word>  is a required single word,  <title>  is an optional plain text title to use with the admonition, and  <content>  is a four - space indented block of markdown text .  When no  <title>  is provided then the  <word>  is capitalised and used as the title . Special - cased  <words>  are  info ,  tip ,  warning ,  danger , and  compat which will be rendered in distinct colors .","id":"docs/syntax.html#admonitions"},{"body":"Files and Related Functionality","id":"src/files.html#files-and-related-functionality"},{"body":"Tools Utility functions that aren ’ t needed directly for  Project s, but are still useful for users . deploy  is for use as the equivalent to Documenters  deploy , but without the network interaction  —   that should be provided separately .","id":"src/tools.html#tools"},{"body":"Publish . jl A universal document authoring package for  Julia . Disclaimer Currently this package should be regarded as experimental  —  a proving ground for new features for the Julia documentation ecosystem rather than a mature and proven piece of software .  If you need a solution that will definitely work, look at  Documenter . jl  instead . This is a package for  Julia  that provides a general framework for writing prose  —  technical documentation is it ’ s focus, though it is general enough to be applied to any kind of written document . Some standout features: built - in live server to view your changes in real - time, uses a fully - compliant  commonmark  parser,  CommonMark . jl , produces HTML and PDF files natively, no LaTeX dependencies to manage yourself, publication - quality PDF generation uses  tectonic  for self - contained, reproducible builds, combine markdown files,  Jupyter  notebooks, and Julia files for your content, and declarative configuration built on top of Julia ’ s  Pkg . jl  package manager . Publish  can scale from single pages all the way to large cross - referenced multi - project documents . To jump straight in and begin using  Publish  run the following in your Julia REPL: The above will install  Publish , import it, and then start up a local web - server for  Publish ’ s own documentation  —  the content you ’ re reading right now .  Open the link in your web browser and then continue on to the next section,  Getting Started .","id":"README.html#publishjl"},{"body":"It ’ s worth noting that your  toc.md  doesn ’ t need to be a simple nested markdown list .  If your document layout should be split into two distinct lists, each with titles, then do that .  For example","id":"docs/structure.html#complex-layouts"},{"body":"Helpers","id":"src/docstrings.html#helpers"},{"body":"Project Structure When a project is composed of multiple pages we need to provide  Publish  with the order in which we would like to include them in the final document .  This can be done in two distinct ways .","id":"docs/structure.html#project-structure"},{"body":"PDF generation . Our PDF creation uses a LaTeX engine, in the form of  tectonic , to make PDF output .","id":"src/targets.html#pdf-generation"},{"body":"public   html   —   function Write  source  to HTML format .   dir  optionally provides the directory to write the final content to .  When this directory is not provided then a temporary directory is used .","id":"docstrings/Publish.html.html"},{"body":"private   Project   —   struct Holds all the data needed to represent a  Publish   “ project ” . Project  objects can be constructed by either providing a  Module  or a Project.toml  file . A constructor for  Project  structs .  Takes a  path  representing a Project.toml  file .  Optional arguments  loaded  and  parent  are for internal use only .","id":"docstrings/Publish.Project.html"},{"body":"public   Publish   —   module The  Publish  package provides tools for composing  markdown files ,  Jupyter Notebooks , and  Literate Julia  files into HTML  and  PDF  documents in a declarative and reproducable way . Publish  documents are represented by  Project  objects that store the information presented in a  Publish   configuration  file, which also happens to be the same  Project.toml  file used by Julia ’ s  Pkg  package manager . To get started using  Publish  by spinning up a web - server for a package of your choosing run the following: See the  getting started  section of the manual for more details .","id":"docstrings/Publish.Publish.html"},{"body":"private   WatchedProject   —   struct An internal wrapper type that stores a  Project  object and watches for changes to occur in any files that the  Project  makes use of .  When any changes occur the provided  actions  list is iterated over .","id":"docstrings/Publish.WatchedProject.html"},{"body":"private   modules   —   function A  Set  of all modules reachable from the given  root   Module .  This includes un - exported and imported  Module s .","id":"docstrings/Publish.modules.html"},{"body":"private   smartlink   —   function Generate a cross - reference link .","id":"docstrings/Publish.smartlink.html"},{"body":"Footnotes These can be added on a per - page basis .  Cross - document footnotes is not supported . Numbers and single word identifiers can be used as footnote names .","id":"docs/syntax.html#footnotes"},{"body":"private   frontmatter   —   function Return the frontmatter content of the given  ast  if it exists, otherwise return an empty  Dict .","id":"docstrings/Publish.frontmatter.html"},{"body":"Pages List The other option for specifying your document structure is to add some configuration to your  Project.toml .  Add a section to the end of the file like the example below You ’ ll likely have some amount of other information in this file since it ’ s used by  Pkg . jl  to manage your Julia package source code .  So long as you include all of the  Publish - specific configuration inside the  [publish] section it won ’ t disturb anything else . The  pages  key doesn ’ t allow you to define a nested structure or provide human - readable titles to each page .  If you outgrow what is provided by  pages then you must switch to using a  toc.md  instead .","id":"docs/structure.html#pages-list"},{"body":"Literate Julia Julia source code can also be read by  Publish .  The syntax used is a stripped down version of that available in  Literate . jl .  All the source code for this package is available for browsing within this document, via the  Source Code section in the navigation menu .  To summarise, lines starting with a single  # , with any amount of leading whitespace is treated as a line of markdown content, lines with a double  ##  are treated as a normal comment and the output will have one  #  stripped from it, other lines are treated as source code and not modified, none of the code blocks are executed, Publish  does not currently support Literate . jl ’ s filters such as  #md , #jl ,  #nb ,  #- , or  #+ , #src  unconditional filtering is supported .  Any line containing  #src will be stripped from the output . Publish  should play nicely with  Revise . jl  and simply importing Revise  prior to  Publish  and your own package will be enough to allow for Revise - style development when using  Publish .","id":"docs/sources.html#literate-julia"},{"body":"Raw Content These block and inline elements can be used to pass raw LaTeX or HTML through to the resulting output without processing it further .  Similar syntax to the  Attributes  above is used . Raw HTML blocks typically don ’ t need to be wrapped in  {=html}  since the commonmark parser supports raw HTML tags by default .","id":"docs/syntax.html#raw-content"},{"body":"HTML - specific These must be added to a  [publish.html]  section rather than directly to your [publish]  section since they are  “ namespaced ”  to avoid conflicting with other keys . js   —   Vector{String}  of local and remote JavaScript resources that you want included in the  <head>  of your HTML pages . css   —   Vector{String}  similar to the one above for  js , but for CSS instead . header   —   String  of content to be inserted at the end of the HTML page ’ s  <head> . footer   —   String  of content to be inserted at the end of the HTML page ’ s  <body> . If you ’ re adding your own CSS and JavaScript then you may want to completely disable inclusion of the default files .  To do that you can set the following keys to  [] , an empty  Vector . default_js   —  similar to  js , but the defaults of the provided template . default_css   —  similar to  css , but the defaults of the provided template .","id":"docs/config.html#html-specific"},{"body":"Project - related Definitions A collection of different globals related to default template files and other assets . The default contents of a  [publish]  section in a  Project.toml  file . The  Project  struct itself, which holds all the data related to how to build it and all it ’ s file dependencies . The main constructor for  Project  objects . A constructor for  Project  objects that takes a  Module  as it ’ s input source .","id":"src/projects.html#project-related-definitions"},{"body":"The Publish . jl package is licensed under the MIT  “ Expat ”  License: Copyright (c) 2020: Michael Hatherly . Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the  “ Software ” ), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software . THE SOFTWARE IS PROVIDED  “ AS IS ” , WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT .  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE .","id":"LICENSE.html"},{"body":"private   DEFAULT_MODULES   —   constant The set of modules that every package has access to .","id":"docstrings/Publish.DEFAULT_MODULES.html"},{"body":"private   editable   —   function Returns the set of  Project s that can be edited in relation to the initial Project .  This means the project itself, as well as an  publish.extra projects that are listed in the  Project.toml .","id":"docstrings/Publish.editable.html"},{"body":"Table of Contents Firstly, you can add a  toc.md  file in the same folder as your  Project.toml and  README.md  files .  Here  “ toc ”  stands for table - of - contents .  Is provides a nested structure that describes your page order to  Publish .  For example In the above example we ’ ve included four  .md  files in our  toc.md  as well as more friendly titles .  All links are relative to the location of your  toc.md file, so keep that in mind when linking to files .  The layout and formatting your give your table - of - contents will be reproduced in the navigation menu of your HTML output, similar to what you ’ ll see if you open the navigation menu in the top left of this site .  For PDF output only the page inclusion  order  is taken into account since LaTeX provides it ’ s own table - of - contents formatting .","id":"docs/structure.html#table-of-contents"},{"body":"private   rootmodule   —   function The  “ root ”  module of a given  Module   m .","id":"docstrings/Publish.rootmodule.html"},{"body":"Jupyter Notebooks Notebook files, those ending with  .ipynb , can be imported in the same way as .md  files in your  toc.md  or  pages =   configuration .  They will behave in the exact same way . Saving your notebooks within a normal Jupyter session will be reflected in your Publish  server just like it is when saving normal markdown files . All source code cells are treated a  julia  code blocks in the resulting Publish  output .","id":"docs/sources.html#jupyter-notebooks"},{"body":"Auto - Identifiers This rule assigns page - unique  :id  attributes to all headings by stripping whitespace, lowercasing, and Unicode transformation .  It is modelled on the behaviour of  Pandoc ’ s auto identifiers .","id":"docs/syntax.html#auto-identifiers"},{"body":"“ Smart ”  Link Implementation First some helper methods for looking up the  Binding  object of a value . “ Smart ”  link cross - referencing . Adjust paths due to inclusion of a toc, which has a different path . And some other helpers needed for  html  generation .","id":"src/targets.html#smart-link-implementation"},{"body":"private   move!   —   function Transfers the data stored in  from::Project  to  to::Project .","id":"docstrings/Publish.move!.html"},{"body":"Examples In the following examples our project will be the  Publish  package .  This can be switched out for any other project source, such as a Julia package or a simple  Project.toml  file . writes the output to the  \"build\"  subdirectory of the current directory . There will be a  build/<version>  folder containing HTML content . does the same as above, but build the  pdf  output instead . or build everything at once . The keyword arguments control other aspects of the build, as shown above .  For example, would build  Publish  documentation to an  ecosystem/Publish/<version> subdirectory .","id":"docstrings/Publish.deploy.html#examples"},{"body":"Tables GitHub - style pipe tables are supported with the same syntax .","id":"docs/syntax.html#tables"},{"body":"The Publish . jl Literate Source Code It ’ s worth pointing out here that your own package doesn ’ t need to follow this style of writing it in a literate way and probably shouldn ’ t .  This has been done for  Publish  so as to test out all of it ’ s available functionality . Welcome to the  Publish  package source code .  Since  Publish supports a subset of  Literate . jl  syntax the source for this package itself makes a good test case for it . The content below and on the subsequent pages is all drawn from the source code of this package found under the  src/  directory . Displayed code blocks are the source code of this package and any markdown content is a comment line starting with  # . Let ’ s start off our exploration of the package with the  Publish  module definition as well as a docstring that appears prior to it .","id":"src/Publish.html#the-publishjl-literate-source-code"},{"body":"Cross Referencing You may want to reference different parts of your document from other places in it .   Publish  supports this with a simplified version of Documenter . jl ’ s syntax .  You can do this by writing markdown link syntax .","id":"docs/references.html#cross-referencing"},{"body":"Direct and Indirect Smart References Smart references determine the location within a project that you would like to link to without having to explicitly write out the file paths . There are two kinds of smart reference links .   Direct  are those that are determined from the visible text of a link and  indirect  ones that use the “ title ”  text of a link to determine the destination instead . All smart references use a  single   #  as the link destination, i . e . In the above example the first link is a  direct  link since it does not provide a link title .  The second one is an  indirect  link since it does provide a title,  \"actual link\" , and so that text is used to determine the link destination instead of the text  indirect link .","id":"docs/references.html#direct-and-indirect-smart-references"},{"body":"Live Server Used to do iterative editing by avoiding the edit - compile - read - loop .","id":"src/targets.html#live-server"},{"body":"private   docstrings   —   function Extract all available docstrings for given  Project   p  and return a files::Dict  containing a mapping from absolute path to  File  object and an index  object, which is  File  object containing a formatted table of all docstrings with information on  name ,  module ,  visibility , and  category of each docstring .","id":"docstrings/Publish.docstrings.html"},{"body":"File Utilities Our markdown parser setup: Parsing of markdown files: Extraction of frontmatter content from a markdown AST:","id":"src/files.html#file-utilities"},{"body":"Referencing Docstrings If you ’ re writing the documentation for a Julia package then you probably have some docstrings .  Referencing them can be done in a similar way to the above referencing of headings and IDs .  The only difference is that the text is wrapped in backticks, since it represents  “ code ” . docstring  must be  visible  within your project .  What this means is that it  isdefined  within one of the  Module s that make up your package .","id":"docs/references.html#referencing-docstrings"},{"body":"LaTeX Maths Double backticks,  `` , are used to write inline LaTeX mathematics .  Fenced code blocks with the language set to  math  are used to write display equations . You may also need to use dollar - style syntax for mathematics, such as when writing Jupyter notebooks that you want to include in your project .  Inline dollar mathematics uses single  $  signs and display mathematics uses double $$ . Double  $$  signs for display mathematics must be on a single line and cannot span multiple lines . You should, by default, use backtick math syntax rather than dollar signs . This syntax is only provided to allow for interoperation with documents that do not use backticks .","id":"docs/syntax.html#latex-maths"},{"body":"Templates You can also completely replace the default HTML and LaTeX templates that Publish  uses with your own ones .  This can be done with the  publish.html.template.file and  publish.latex.template.file  keys .  You ’ ll need to create specific sections within your  Project.toml  to add them, like so If you ’ re going to write your own templates then having a read through then defaults will probably help you out a bit .  They can be found in the src/templates  directory of this package .","id":"docs/templates.html#templates"},{"body":"Example Jupyter Notebooks This page has been written as a Jupyter Notebook, which was introduced in the  Jupyter Notebooks  section of the manual .  The notebooks provided in this package are just illustrative of how you can integrate notebooks into the rest of your project and still allow for cross references between different parts of the finished document . Let ’ s load the required packages .  We ’ re using  Revise  as well since  Publish  integrates well with it and allows you to update your package  src/  contents, such as docstrings, and have the changes reflected in the document output immediately if you ’ re using the  serve  function . You can use  html  to do a one time build of the project: PDFs can be built using  pdf  in a similar way to  html  above: You probably want to use  serve  instead though, since that ’ ll spin up a web - server to host your project locally and allow you to view changes in real - time .","id":"examples/basics.html#example-jupyter-notebooks"},{"body":"Referencing Headings To refer to a heading somewhere else in the project it must be  uniquely  named —  specifically the  “ slug ”  generated by the heading text must be unique . Typically referencing a heading is as simple as placing the text of the heading as link text, or link title, and everything is calculated for you .  In cases where you have multiple headings within your document that contain the same text you ’ ll need to use the IDs instead, as explained in the  next section","id":"docs/references.html#referencing-headings"},{"body":"public   pdf   —   function Write  source  project to PDF format .   dir  may optionally specify the directory to write the finished document to .  Intermediate  .tex  files are retained for debugging purposes .","id":"docstrings/Publish.pdf.html"},{"body":"public   setup   —   function Initialise a  Publish  project in the given directory  dir , which is created if it does not already exist . When  dir  has a Julia project structure with a  Project.toml  file then Publish  is added to it ’ s dependencies list, otherwise, if it is not a Julia package then a  Project.toml  file is created as well as a  README.md  file .","id":"docstrings/Publish.setup.html"},{"body":"Special Pages There ’ s a couple of pages that will appear in your output but that don ’ t exist within your project ’ s source files .  These are the generated docstring pages (under  docstrings/*.md ) and a docstring index page (found at  docstrings.md ) . You may want to add  /docstrings.md  to your  toc.md  if you ’ d like people to be able to search through your project ’ s available docstrings .  If you ’ r viewing this document in a browser then there should be a link to  Library Explorer  in the sidebar navigation menu .","id":"docs/structure.html#special-pages"},{"body":"Below we have defined the  MIME  types (and extensions) that  Publish supports .  It will ignore anything not on this list . We also want an inverse lookup  Dict  to that we can handle converting a MIME  to it ’ s file extension . Next we define a  File  type . We also have a number of constructors for  File  objects that make it easier to create different variants of  File s . This one dispatches to others further down by examining the file extensions . This  File  constructor handles Jupyter Notebooks, which are written in JSON  format . .jl  files are treated as Literate Julia .  This function below provides a reduced set of functionality compared to the Literate . jl package . Markdown files,  .md  extension, is pretty simple to handle . As is the  .toml  filetype .  For both we ’ re just using the provided packages that parse those file types . There ’ s also a number of file types that we don ’ t want to do any kind of parsing to .  These are listed below and just produce a raw  File . A nice error message is provided for other mime types .","id":"src/files.html#mime-type-defs"},{"body":"Project Watching - related functions . A section of helper functions for the code found above . Modules that should be ignored when finding which modules a  Project depends on .","id":"src/projects.html#project-watching-related-functions"},{"body":"Included Files And also the  include d files that make up this package .","id":"src/Publish.html#included-files"},{"body":"Utilities","id":"src/targets.html#utilities"},{"body":"private   tryset!   —   function Try to add the given  key / value  pair to the object  dict .  Returns  true or  false  depending on whether the action was successful .","id":"docstrings/Publish.tryset!.html"},{"body":"Getting Started","id":"docs/getting_started.html#getting-started"},{"body":"You might have a  Publish  server running at the moment, pointed at Publish ’ s own documentation .  If not you can start one with Don ’ t forget to install  Publish  first using  Pkg.add .  You can leave this server running while we walk through creating your own project .  Choose one of the options below that best describes your needs: Julia package authors: The easiest way to get started with  Publish  if you ’ re a Julia package author is to import your package and then  serve  it with  Publish  like we ’ ve done above .   Publish  will look for the  Project.toml  for your package and use it to serve your project .  You should have a  README.md  as part of your package, which is what  Publish  will initially read since you ’ ve not specified anything else for it to find .","id":"docs/getting_started.html#serving-publish"},{"body":"JSON Search Data Target","id":"src/targets.html#json-search-data-target"},{"body":"versioned  and  named . These keywords will place the built files in either a versioned subdirectory, or a named subdirectory of  dir , or both (with name superceding version) . The values for  name  and  version  are taken from those provided in the project ’ s  Project.toml  file .  If these values are not specified then the “ deployment ”  will fail . force  will remove the calculated build path prior to building if it already exists . label  specifies a temporal folder name to copy the finished build to . This can be used to build a  “ tracking ”  version of documentation such as a “ dev ”  or  “ stable ”  that changes over time while still retaining the exact versioned builds .","id":"docstrings/Publish.deploy.html#keywords"},{"body":"public   deploy   —   function Build the  source  using the given  targets  list in the  dir  directory . source  can be either a  Module  or a  String  representing a  Project.toml path . Keyword arguments can be used to control resulting directory structure .","id":"docstrings/Publish.deploy.html"},{"body":"Everyone else: If you ’ ve not got a Julia package that you ’ d like to document then don ’ t worry about it  —   Publish  is still perfect for your needs .  Run the following where  <directory>  is the path to the directory containing the prose you ’ d like to use . If you ’ ve not got anything written yet, that ’ s fine too .  Just point  setup at an empty directory .   Publish  will name your new project based on the directory ’ s name . You ’ re now ready to start serving a project and working on it .  If it ’ s a package that you ’ re working on use We ’ ve set the keyword  port=8001  since we ’ ve still got the other server running with  Publish ’ s documentation .  If you ’ ve only got one server going then you don ’ t need to worry about  port . If you ’ ve got a non - package project setup from  above  then just use the command it printed out to run .  Something like That ’ s all you need to get started .  Open that  localhost  link in a browser of your choice, edit your  README.md , and save it .  You ’ ll see the changes reflect in the browser soon afterwards .","id":"docs/getting_started.html#step-two"},{"body":"Output Formats “ Targets ”  represent different ways to output  Project  objects .   This might be as a literal file or tree of files, or it may be test results from running doctests, or perhaps checking validity of external links .","id":"src/targets.html#output-formats"},{"body":"Deploying Projects We usually don ’ t build our projects in isolation and want others to be able to view our results .  For this you can use  deploy .  This function will build your project in the provided directory in a versioned subdirectory .","id":"examples/basics.html#deploying-projects"},{"body":"private   watch   —   function Watch a  p::Project  for changes and run all  actions...  when any changes occur .","id":"docstrings/Publish.watch.html"},{"body":"Referencing IDs Each heading within a page is given a unique ID associated with it .  This is what is used in the  previous section  to determine destinations .  You can also assign your own special ID to individual markdown elements, most commonly headings, but also any other node type will do . Above we give a  #special-name  to the heading since it ’ s got a generic name that appears elsewhere in the project .  This allows us to refer to it from other places in the document using either a  direct  or  indirect  reference as discussed  above .  For example Using an ID as a  direct  reference is probably something you don ’ t want to do since IDs aren ’ t terribly human - friendly, but you can do it with","id":"docs/references.html#referencing-ids"},{"body":"File References When you reference a relative path to another file within a project the resulting link in the final document will point to the generated file rather than the original . The above link will reference the resulting content generated by  file.md .  So either a  file.html  or a particular page within the generated PDF .","id":"docs/references.html#file-references"},{"body":"Front Matter At the start of any markdown file you can add a fenced block of  TOML  content . The TOML content is placed between triple  +++  signs at the  very  start of a file .  The TOML parser is the same that is used for parsing your  Project.toml files by Pkg . jl . Publish  allows you to override some global configuration from your [publish]  block in  Project.toml  within your pages ’  front matter blocks on a per - page basis .","id":"docs/syntax.html#front-matter"},{"body":"Publishing If you ’ re writing documentation for a package you ’ ll probably want to host it online somewhere in HTML form for potential users to browse through before they decide whether to install it or not .  Even if what you ’ re writing isn ’ t a Julia package the following guide can be applied to it . Publish  provides the function  deploy  for the purpose of creating output that is suitable for hosting online .  This is similar in spirit to Documenter ’ s function that goes by same name . The  deploy  function is  “ layered ”  on top of  html  and  pdf , just as  serve  is also a  “ layer ”  on top of these simpler functions . Whereas  serve  is meant for local use,  deploy  is intended for use building documents for hosting online  —  though it can be used locally as well if you ’ d like to see what it produces . When you run  deploy  it will create a folder in the current directory named after the  version  field found in  Project.toml  containing the built HTML documentation .  For example, will build the HTML project defined by the  Publish  package in a folder named after the current  Publish  version in the current directory .  You can adjust these settings a fair amount .  See the  deploy  docs for details . For this part of the guide we ’ ll be using GitHub for building and hosting, but there is nothing in  deploy  that is  specific  to GitHub and it should work fine on any other kind of service . We ’ ll be using GitHub Actions and Pages to make building and deploying simple and straightforward .  It ’ s assumed that you ’ ve already got your source code hosted on a public GitHub repository . First, create a  gh-pages  branch for your repository .  Delete  all  the contents of this branch and then commit and push your changes to GitHub .  Switch back to your main development branch . Next we ’ ll need a GitHub Actions workflow file .  If you ran the  setup function  earlier  then you ’ ll already have a .github/workflows/Publish.yml .  If not then run that now to add the file . Open it up in an editor and find the line with and edit the  USER  to be what is needed to build your project correctly .  The keywords used by  deploy  here are  root  and  label : root  specifies a  “ root ”  path for all deployed documentation .  Since we ’ re using GitHub Pages to host your documentation it ’ ll be hosted at <username>.github.io/<pkg>.jl/ .  We need to tell  deploy  about this otherwise it ’ ll set the root to  <username>.gitgub.io/  which won ’ t point to the correct place . label  is used to assign a  “ tracking ”  folder that follows any changes you make, rather than just being an immutable version folder .  In this case we are deploying when changes are pushed to  master  and so the  “ tracking ” folder is  dev  which follows  Documenter ’ s naming scheme . You can change this to whatever you want .  For example you could create a separate actions file that runs when new releases are published to your repository and have that build your project in a  stable  folder to track your most recent stable documentation . Once you ’ ve committed and pushed these changes to GitHub it will start building your project on every commit to  master .  Read the  Actions  documentation for more details on what you can change . It ’ s now time to move on to the details of how to customise your project in the next section .","id":"docs/getting_started.html#publishing"},{"body":"I was promised PDFs Correct,  Publish  doesn ’ t just produce HTML websites .  PDF output is also available .   You don ’ t have to change anything with your  Project.toml  or README.md  to get it working either .  Just change your  serve  call slightly, This might take longer on your first run since  Publish  needs to download the support files needed by LaTeX to build your document .  You should get plenty of informative output in the REPL to tell you what ’ s happening . Once it ’ s finished compiling the PDF it should get opened in your default PDF viewer .  If your viewer supports auto - updates then when you make changes to README.md  is should be reflected automatically in the PDF . If you ’ re greedy and want both  pdf  and  html  then just run","id":"docs/getting_started.html#i-was-promised-pdfs"},{"body":"Imports Below we have all the imported packages that  Publish  itself uses .","id":"src/Publish.html#imports"},{"body":"Configuration Publish  stores all it ’ s configuration data within the  Project.toml  file . So long as you do not access arbitrary global data and maintain suitable [compat]  bounds on packages where needed your  Publish  builds should be reproducible .  If you ’ re needing fully reproducible environments then you should also be saving the  Manifest.toml  file to track exact versions of dependencies .   For details on this topic please see the Pkg . jl docs on Manifest . toml files . The heart of  Publish ’ s configuration is the  [publish]  section of your Project.toml  file .  This is where everything related to  Publish  is stored . You ’ ve already seen some of it in  action .  Below we ’ ll go over what options are available when you need to customise your project . Some features you can make use of via  Publish ’ s configuration: set the  title ,  subtitle , and  author  of your document, load custom CSS and JavaScript into your HTML, add custom LaTeX preamble content to your PDF documents, used - defined templates for your documents, and numerous other options .","id":"docs/config.html#configuration"},{"body":"Source Types Up until now we ’ ve been using markdown files for our source content  —  those ending with  .md .   Publish  also allows using several other file types to be used in place of markdown files, so long as the text is formatted as markdown .","id":"docs/sources.html#source-types"}]